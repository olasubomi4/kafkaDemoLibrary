/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mycorp.mynamespace;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Sample schema to help you get started. */
@org.apache.avro.specific.AvroGenerated
public class sampleRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6842721112108313L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"sampleRecord\",\"namespace\":\"com.mycorp.mynamespace\",\"doc\":\"Sample schema to help you get started.\",\"fields\":[{\"name\":\"id\",\"type\":\"int\",\"doc\":\"The int type is a 32-bit signed integer.\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"string for name\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The int type is a 32-bit signed integer. */
  @Deprecated public int id;
  /** string for name */
  @Deprecated public java.lang.CharSequence name;
  /** int */
  @Deprecated public int age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public sampleRecord() {}

  /**
   * All-args constructor.
   * @param id The int type is a 32-bit signed integer.
   * @param name string for name
   * @param age int
   */
  public sampleRecord(java.lang.Integer id, java.lang.CharSequence name, java.lang.Integer age) {
    this.id = id;
    this.name = name;
    this.age = age;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return age;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The int type is a 32-bit signed integer.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The int type is a 32-bit signed integer.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return string for name
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * string for name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return int
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * int
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Creates a new sampleRecord RecordBuilder.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder() {
    return new com.mycorp.mynamespace.sampleRecord.Builder();
  }

  /**
   * Creates a new sampleRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder(com.mycorp.mynamespace.sampleRecord.Builder other) {
    return new com.mycorp.mynamespace.sampleRecord.Builder(other);
  }

  /**
   * Creates a new sampleRecord RecordBuilder by copying an existing sampleRecord instance.
   * @param other The existing instance to copy.
   * @return A new sampleRecord RecordBuilder
   */
  public static com.mycorp.mynamespace.sampleRecord.Builder newBuilder(com.mycorp.mynamespace.sampleRecord other) {
    return new com.mycorp.mynamespace.sampleRecord.Builder(other);
  }

  /**
   * RecordBuilder for sampleRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<sampleRecord>
    implements org.apache.avro.data.RecordBuilder<sampleRecord> {

    /** The int type is a 32-bit signed integer. */
    private int id;
    /** string for name */
    private java.lang.CharSequence name;
    /** int */
    private int age;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mycorp.mynamespace.sampleRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing sampleRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mycorp.mynamespace.sampleRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * The int type is a 32-bit signed integer.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * The int type is a 32-bit signed integer.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The int type is a 32-bit signed integer.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * The int type is a 32-bit signed integer.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * string for name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * string for name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * string for name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * string for name
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * int
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * int
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * int
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'age' field.
      * int
      * @return This builder.
      */
    public com.mycorp.mynamespace.sampleRecord.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public sampleRecord build() {
      try {
        sampleRecord record = new sampleRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
